///////////////////////////////////////////////////////////////////////
// Copyright (c) 2017 VMware, Inc. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
///////////////////////////////////////////////////////////////////////

// Code generated by go-swagger; DO NOT EDIT.

package secret

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	middleware "github.com/go-openapi/runtime/middleware"
)

// GetSecretHandlerFunc turns a function with the right signature into a get secret handler
type GetSecretHandlerFunc func(GetSecretParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetSecretHandlerFunc) Handle(params GetSecretParams) middleware.Responder {
	return fn(params)
}

// GetSecretHandler interface for that can handle valid get secret params
type GetSecretHandler interface {
	Handle(GetSecretParams) middleware.Responder
}

// NewGetSecret creates a new http.Handler for the get secret operation
func NewGetSecret(ctx *middleware.Context, handler GetSecretHandler) *GetSecret {
	return &GetSecret{Context: ctx, Handler: handler}
}

/*GetSecret swagger:route GET /{secretName} secret getSecret

GetSecret get secret API

*/
type GetSecret struct {
	Context *middleware.Context
	Handler GetSecretHandler
}

func (o *GetSecret) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		r = rCtx
	}
	var Params = NewGetSecretParams()

	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request

	o.Context.Respond(rw, r, route.Produces, route, res)

}
